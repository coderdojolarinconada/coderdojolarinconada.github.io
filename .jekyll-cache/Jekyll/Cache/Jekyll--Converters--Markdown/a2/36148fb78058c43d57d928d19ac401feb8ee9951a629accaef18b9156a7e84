I"™<p>Estamos de vuelta y contin√∫a la tercera parte de nuestro programa realizado con Pygame Zero. Introducir√°s nuevo c√≥digo que evitar√° algunos errores de posici√≥n y introducir√°s sonidos y nuevos objetos para la ejecuci√≥n del juego.</p>

<p>Para resumir :</p>
<ul>
  <li>Has creado una <strong>ventana</strong></li>
  <li>Tambi√©n <strong>un jugador</strong></li>
  <li>Posici√≥n y movimiento en la pantalla</li>
  <li>Objeto que debes recolectar(<strong>moneda</strong>)</li>
  <li>Una <strong>roca</strong> como enemigo de nuestro jugador</li>
  <li>Colisi√≥n de la <strong>moneda</strong> con el <strong>jugador</strong> para su recolecci√≥n</li>
</ul>

<p>As√≠ queda nuestro c√≥digo hasta ahora.</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>import pgzrun
import random

WIDTH = 800
HEIGHT = 600

#Creamos un actor (nuestro personaje). As√≠ comienzan las l√≠neas de comentarios #
#Imagen jugador.png, guardada en images, carpeta creada dentro de la carpeta 
#del juego

player = Actor("jugador")
player.pos = 100, 100  # posici√≥n inicial del jugador

moneda = Actor("moneda")
moneda.x = random.randint(0,800)
moneda.y = random.randint(0,600)
#variable
puntos = 0

def update():  # funci√≥n que actualiza nuestro tablero de juego 60 veces por segundo.

    global puntos
    
    # movimiento del jugador
    if keyboard.left:
        player.x -= 4  # es lo mismo que player.x = player.x - 4
    if keyboard.right:
        player.x += 4
    if keyboard.up:
        player.y -= 4
    if keyboard.down:
        player.y += 4
        
    # colisi√≥n del jugador con la moneda 
    if player.colliderect(moneda):
    moneda.x = random.randint(0,800)
    moneda.y = random.randint(0,600)
    puntos = puntos + 1 #  o lo que lo mismo "puntos +=1"

def draw():
    screen.fill("white")
    screen.draw.text('Puntos: ' + str(puntos), (15,10), color=(0,0,0), fontsize=30)
    player.draw()
    moneda.draw()

pgzrun.go()
</code></pre></div></div>

<p>Ahora seguiremos introduciendo cambios en nuestro c√≥digo y objetos nuevos.</p>

<p>El siguiente paso ser√° evitar que nuestro personaje se salga del escenario de juego. Se va a a√±adir nuevas condiciones dobles dentro de la funci√≥n update. Debes recordar que se ha creado una pantalla de juego de 800 de ancho por 600 de alto y que el punto con coordenada x=0 e y=0 est√° en la parte izquierda superior, por lo cu√°l, dentro del condicional que ejecuta el movimiento a la izquierda, deber√°s a√±adir una condici√≥n doble que ser√° ‚Äú<strong>True</strong>‚Äù cuando pulsemos la flecha izquierda y la posici√≥n del personaje sea mayor que 0 m√°s al mitad del ancho del personaje. Vamos a ver el c√≥digo.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>if keyboard.left:
        player.x -= 4  # es lo mismo que player.x = player.x - 4
</code></pre></div></div>

<p>ser√° modificado por lo siguiente:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>if keyboard.left and player.x &gt; 0 + player.width / 2:
    player.x -= 4  # es lo mismo que player.x = player.x - 4
</code></pre></div></div>

<p>Observamos lo que estos cambios implican. Se incorpora el operador l√≥gico ‚Äú<strong>and</strong>‚Äù para que se cumplan ambas condiciones al mismo tiempo y no √∫nicamente una. En otras palabras, debemos pulsar la flecha izquierda del teclado y adem√°s la posici√≥n en el <strong>eje x</strong> del jugador debe ser mayor que <strong>0</strong>, a la que hay que sumar la <strong>anchura</strong> del jugador <strong>dividida entre 2</strong>. Puedes quitar la segunda parte de la suma y ver√°s qu√© pasa.¬°¬°Pru√©balo!!</p>

<p>Ahora ser√° necesario realizarlo con el resto de condicionales, quedando como sigue:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>if keyboard.left and player.x &gt; 0 + player.width / 2:
    player.x -= 4  # es lo mismo que player.x = player.x - 4
if keyboard.right and player.x &lt; WIDTH - player.width / 2:
    player.x += 4
if keyboard.up and player.y &gt; 0 + player.height / 2:
    player.y -= 4
if keyboard.down and player.y &lt; HEIGHT - player.height / 2:
    player.y += 4
</code></pre></div></div>

<p>Podr√°s ver que cuando mueves a tu jugador horizontalmente se tiene en cuenta la posici√≥n en ‚Äú<strong>x</strong>‚Äù y la mitad de la anchura del jugador y al moverlo verticalmente se tiene en cuenta la posici√≥n en ‚Äú<strong>y</strong>‚Äù del jugador sumando o restando su altura dividida entre 2. No hay que confundir <strong>player.width</strong> o <strong>player.height</strong> (anchura y altura del personaje) con <strong>WIDTH</strong> o <strong>HEIGHT</strong> (ancho y alto de la pantalla- 800 x 600). Puedes hacer pruebas eliminando la suma o resta a la posici√≥n del jugador.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># colisi√≥n del jugador con la moneda
        if player.colliderect(moneda):
            moneda.x = random.randint(0, 800)
            moneda.y = random.randint(0, 600)
            puntos = puntos + 1  # o lo que lo mismo "puntos +=1"
</code></pre></div></div>
:ET